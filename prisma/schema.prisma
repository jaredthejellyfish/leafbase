datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextSearch"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  displayName   String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  aboutMe       String?
  birthDate     DateTime?
  languages     String?
  phone         String?
  location      String    @default("Earth")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
  comments      Comment[]

  @@map("users")
}

model Strain {
  id               String    @id @default(cuid())
  slug             String    @unique
  name             String?
  subtitle         String?
  category         String?
  phenotype        String?
  averageRating    Float?
  shortDescription String?
  description      String?
  nugImage         String?
  flowerImageSvg   String?
  topTerpene       String?
  thcPercent       Float?
  topEffect        String?
  cannabinoids     Json?
  effects          Json?
  terps            Json?
  likes            Like[]
  comments         Comment[]

  @@map("strains")
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  strainId  String
  body      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  strain    Strain   @relation(fields: [strainId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  strainId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  strain    Strain   @relation(fields: [strainId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
