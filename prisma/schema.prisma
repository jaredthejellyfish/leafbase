datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  displayName             String?                  @unique
  email                   String?                  @unique
  emailVerified           DateTime?
  image                   String?
  aboutMe                 String?
  birthDate               DateTime?
  languages               String?
  phone                   String?
  location                String                   @default("Earth")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  accounts                Account[]
  sessions                Session[]
  likes                   Like[]
  comments                Comment[]
  dispensaryComments      DispensaryComment[]
  dispensaryCommentLikes  DispensaryCommentLike[]
  commentLikes            CommentLike[]
  dispensarySubscriptions DispensarySubscription[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Strain {
  id               String    @id @default(cuid())
  slug             String    @unique
  name             String?
  subtitle         String?
  category         String?
  phenotype        String?
  averageRating    Float?
  shortDescription String?
  description      String?
  nugImage         String?
  flowerImageSvg   String?
  topTerpene       String?
  thcPercent       Float?
  topEffect        String?
  cannabinoids     Json?
  effects          Json?
  terps            Json?
  likes            Like[]
  comments         Comment[]
  mixers           Mixer[]

  @@map("strains")
}

model Mixer {
  id             String @id @default(cuid())
  strainId       String
  strain         Strain @relation(fields: [strainId], references: [id], onDelete: Cascade)
  name           String
  recommendation String
  slug           String
  nugImage       String
  averageRating  Float
  category       String

  @@map("mixers")
}

model Comment {
  id        String        @id @default(cuid())
  userId    String
  strainId  String
  body      String?
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  strain    Strain        @relation(fields: [strainId], references: [id], onDelete: Cascade)
  likes     CommentLike[]

  @@map("comments")
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("comment_likes")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  strainId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  strain    Strain   @relation(fields: [strainId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Dispensary {
  id            String                   @id @default(cuid())
  slug          String                   @unique
  name          String?
  description   String?
  address       String?
  city          String?
  phone         String?
  website       String?
  email         String?
  hours         String?
  latitude      Float?
  longitude     Float?
  averageRating Float?
  image         String?
  logo          String?
  comments      DispensaryComment[]
  subscriptions DispensarySubscription[]
  menus         DispensaryMenu[]

  @@map("dispensaries")
}

model DispensaryComment {
  id           String                  @id @default(cuid())
  userId       String
  dispensaryId String
  body         String?
  createdAt    DateTime                @default(now())
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dispensary   Dispensary              @relation(fields: [dispensaryId], references: [id], onDelete: Cascade)
  likes        DispensaryCommentLike[]

  @@map("dispensary_comments")
}

model DispensaryCommentLike {
  id        String            @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   DispensaryComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("dispensary_comment_likes")
}

model DispensarySubscription {
  id           String     @id @default(cuid())
  userId       String
  dispensaryId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dispensary   Dispensary @relation(fields: [dispensaryId], references: [id], onDelete: Cascade)

  @@map("dispensary_subscriptions")
}

model DispensaryMenu {
  id           String     @id @default(cuid())
  dispensaryId String
  dispensary   Dispensary @relation(fields: [dispensaryId], references: [id], onDelete: Cascade)
  menu         Json

  @@map("dispensary_menus")
}
