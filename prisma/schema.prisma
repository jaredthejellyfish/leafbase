datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  aboutMe       String?
  birthDate     DateTime?
  languages     String?
  phone         String?
  location      String?
  accounts      Account[]
  sessions      Session[]
  Like          Like[]

  @@map("users")
}

model Strain {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  slug             String  @unique
  name             String?
  subtitle         String?
  category         String?
  phenotype        String?
  averageRating    Float?
  shortDescription String?
  description      String?
  nugImage         String?
  flowerImageSvg   String?
  topTerpene       String?
  thcPercent       Float?
  topEffect        String?
  cannabinoids     Json?
  effects          Json?
  terps            Json?
  Like             Like[]

  @@map("strains")
}

model Like {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  strainId String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  strain   Strain @relation(fields: [strainId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
